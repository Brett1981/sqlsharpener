// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SqlSharpener.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SimpleExample.DataLayer
{
	using System;
	using System.IO;
	using System.Data;
	using System.Data.SqlClient;
	using System.Configuration;
	using System.Collections.Generic;

	/// <summary>
	/// Interface of the wrapper class for calling stored procedures. 
	/// </summary>
	public partial interface IStoredProcedures
	{
		/// <summary>
		/// Calls the "usp_TaskCreate" stored procedure
		/// </summary>
		/// <returns>The number of rows affected.</returns>
		int TaskCreate( TaskCreateInputDto input );
		
		/// <summary>
		/// Calls the "usp_TaskCreate" stored procedure
		/// </summary>
		/// <returns>The number of rows affected.</returns>
		int TaskCreate( String Name, String Description, Int32? TaskStatusId, DateTime? Created, String CreatedBy, DateTime? Updated, String UpdatedBy, out Int32? TaskId );

		/// <summary>
		/// Calls the "usp_TaskGet" stored procedure
		/// </summary>
		/// <returns>A DTO filled with the results of the SELECT statement.</returns>
		Result<TaskGetOutputDto> TaskGet( TaskGetInputDto input );
		
		/// <summary>
		/// Calls the "usp_TaskGet" stored procedure
		/// </summary>
		/// <returns>A DTO filled with the results of the SELECT statement.</returns>
		Result<TaskGetOutputDto> TaskGet( Int32? TaskId );

		/// <summary>
		/// Calls the "usp_TaskUpdate" stored procedure
		/// </summary>
		/// <returns>The number of rows affected.</returns>
		int TaskUpdate( TaskUpdateInputDto input );
		
		/// <summary>
		/// Calls the "usp_TaskUpdate" stored procedure
		/// </summary>
		/// <returns>The number of rows affected.</returns>
		int TaskUpdate( Int32? TaskId, String Name, String Description, Int32? TaskStatusId, DateTime? Updated, String UpdatedBy );

	}

	/// <summary>
	/// Wrapper class for calling stored procedures. 
	/// </summary>
	public partial class StoredProcedures : IStoredProcedures
	{
		private string connectionString;

		public StoredProcedures(string connectionString)
		{
			this.connectionString = connectionString;
		}


		/// <summary>
		/// Calls the "usp_TaskCreate" stored procedure
		/// </summary>
		/// <returns>The number of rows affected.</returns>
		public int TaskCreate( TaskCreateInputDto input )
		{
			Int32? TaskIdOutput;
			var result = this.TaskCreate(input.Name, input.Description, input.TaskStatusId, input.Created, input.CreatedBy, input.Updated, input.UpdatedBy, out TaskIdOutput);
			input.TaskId = TaskIdOutput;
			return result;
		}

		/// <summary>
		/// Calls the "usp_TaskCreate" stored procedure
		/// </summary>
		/// <returns>The number of rows affected.</returns>
		public int TaskCreate( String Name, String Description, Int32? TaskStatusId, DateTime? Created, String CreatedBy, DateTime? Updated, String UpdatedBy, out Int32? TaskId )
		{
			OnTaskCreateBegin();
			int result;
			using(var conn = new SqlConnection(connectionString))
			{
				conn.Open();
				using (var cmd = conn.CreateCommand())
				{
					cmd.CommandType = CommandType.StoredProcedure;
					cmd.CommandText = "usp_TaskCreate";
					cmd.Parameters.Add("Name", SqlDbType.VarChar).Value = (object)Name ?? DBNull.Value;
					cmd.Parameters.Add("Description", SqlDbType.VarChar).Value = (object)Description ?? DBNull.Value;
					cmd.Parameters.Add("TaskStatusId", SqlDbType.Int).Value = (object)TaskStatusId ?? DBNull.Value;
					cmd.Parameters.Add("Created", SqlDbType.DateTime).Value = (object)Created ?? DBNull.Value;
					cmd.Parameters.Add("CreatedBy", SqlDbType.VarChar).Value = (object)CreatedBy ?? DBNull.Value;
					cmd.Parameters.Add("Updated", SqlDbType.DateTime).Value = (object)Updated ?? DBNull.Value;
					cmd.Parameters.Add("UpdatedBy", SqlDbType.VarChar).Value = (object)UpdatedBy ?? DBNull.Value;
					var TaskIdOutputParameter = new SqlParameter("TaskId", SqlDbType.Int) { Direction = ParameterDirection.Output };
					cmd.Parameters.Add(TaskIdOutputParameter);

					result = cmd.ExecuteNonQuery();
					TaskId = TaskIdOutputParameter.Value as Int32?;

				}
				conn.Close();
			}
			OnTaskCreateEnd(result);
			return result;
		}

		partial void OnTaskCreateBegin();
		partial void OnTaskCreateEnd(int result);

		/// <summary>
		/// Calls the "usp_TaskGet" stored procedure
		/// </summary>
		/// <returns>A DTO filled with the results of the SELECT statement.</returns>
		public Result<TaskGetOutputDto> TaskGet( TaskGetInputDto input )
		{
			var result = this.TaskGet(input.TaskId);
			return result;
		}

		/// <summary>
		/// Calls the "usp_TaskGet" stored procedure
		/// </summary>
		/// <returns>A DTO filled with the results of the SELECT statement.</returns>
		public Result<TaskGetOutputDto> TaskGet( Int32? TaskId )
		{
			OnTaskGetBegin();
			Result<TaskGetOutputDto> result = new Result<TaskGetOutputDto>();
			using(var conn = new SqlConnection(connectionString))
			{
				conn.Open();
				using (var cmd = conn.CreateCommand())
				{
					cmd.CommandType = CommandType.StoredProcedure;
					cmd.CommandText = "usp_TaskGet";
					cmd.Parameters.Add("TaskId", SqlDbType.Int).Value = (object)TaskId ?? DBNull.Value;

					using(var reader = cmd.ExecuteReader(CommandBehavior.SequentialAccess))
					{
						result.RecordsAffected = reader.RecordsAffected;
						while (reader.Read())
						{
							var item = new TaskGetOutputDto();
							item.Name = reader.GetString(0);
							item.Description = reader.GetString(1);
							item.Status = reader.GetString(2);
							item.Created = reader.GetDateTime(3);
							item.CreatedBy = reader.GetString(4);
							item.Updated = reader.GetDateTime(5);
							item.UpdatedBy = reader.GetString(6);
							result.Data = item;
						}
						reader.Close();
					}

				}
				conn.Close();
			}
			OnTaskGetEnd(result);
			return result;
		}

		partial void OnTaskGetBegin();
		partial void OnTaskGetEnd(Result<TaskGetOutputDto> result);

		/// <summary>
		/// Calls the "usp_TaskUpdate" stored procedure
		/// </summary>
		/// <returns>The number of rows affected.</returns>
		public int TaskUpdate( TaskUpdateInputDto input )
		{
			var result = this.TaskUpdate(input.TaskId, input.Name, input.Description, input.TaskStatusId, input.Updated, input.UpdatedBy);
			return result;
		}

		/// <summary>
		/// Calls the "usp_TaskUpdate" stored procedure
		/// </summary>
		/// <returns>The number of rows affected.</returns>
		public int TaskUpdate( Int32? TaskId, String Name, String Description, Int32? TaskStatusId, DateTime? Updated, String UpdatedBy )
		{
			OnTaskUpdateBegin();
			int result;
			using(var conn = new SqlConnection(connectionString))
			{
				conn.Open();
				using (var cmd = conn.CreateCommand())
				{
					cmd.CommandType = CommandType.StoredProcedure;
					cmd.CommandText = "usp_TaskUpdate";
					cmd.Parameters.Add("TaskId", SqlDbType.Int).Value = (object)TaskId ?? DBNull.Value;
					cmd.Parameters.Add("Name", SqlDbType.VarChar).Value = (object)Name ?? DBNull.Value;
					cmd.Parameters.Add("Description", SqlDbType.VarChar).Value = (object)Description ?? DBNull.Value;
					cmd.Parameters.Add("TaskStatusId", SqlDbType.Int).Value = (object)TaskStatusId ?? DBNull.Value;
					cmd.Parameters.Add("Updated", SqlDbType.DateTime).Value = (object)Updated ?? DBNull.Value;
					cmd.Parameters.Add("UpdatedBy", SqlDbType.VarChar).Value = (object)UpdatedBy ?? DBNull.Value;

					result = cmd.ExecuteNonQuery();

				}
				conn.Close();
			}
			OnTaskUpdateEnd(result);
			return result;
		}

		partial void OnTaskUpdateBegin();
		partial void OnTaskUpdateEnd(int result);


		/// <summary>
		/// Helper function to get the bytes out of varbinary columns
		/// </summary>
		private byte[] GetBytes(IDataReader reader, int ordinal)
		{
			MemoryStream ms = new MemoryStream();
			BinaryWriter writer = new BinaryWriter(ms);
			byte[] buffer = new byte[1024];
			long blobSize = reader.GetBytes(ordinal, 0, null, 0, 0);
			long currPos = 0;
			while (currPos < blobSize) {
				currPos += reader.GetBytes(ordinal, currPos, buffer, 0, 1024);
				writer.Write(buffer);
				writer.Flush();
			}
			writer.Close();
			return ms.ToArray();
		}
	}

	/// <summary>
	/// The return value of the stored procedure functions.
	/// </summary>
	public partial class Result<T>
	{
		public T Data { get; set; }
		public int RecordsAffected { get; set; }
	}

	/// <summary>
	/// DTO for the input of the "usp_TaskCreate" stored procedure.
	/// </summary>
	public partial class TaskCreateInputDto
	{
		/// <summary>
		/// Property that fills the Name input parameter.
		/// </summary>
		public String Name { get; set; }
		/// <summary>
		/// Property that fills the Description input parameter.
		/// </summary>
		public String Description { get; set; }
		/// <summary>
		/// Property that fills the TaskStatusId input parameter.
		/// </summary>
		public Int32? TaskStatusId { get; set; }
		/// <summary>
		/// Property that fills the Created input parameter.
		/// </summary>
		public DateTime? Created { get; set; }
		/// <summary>
		/// Property that fills the CreatedBy input parameter.
		/// </summary>
		public String CreatedBy { get; set; }
		/// <summary>
		/// Property that fills the Updated input parameter.
		/// </summary>
		public DateTime? Updated { get; set; }
		/// <summary>
		/// Property that fills the UpdatedBy input parameter.
		/// </summary>
		public String UpdatedBy { get; set; }
		/// <summary>
		/// Property that gets filled with the TaskId output parameter.
		/// </summary>
		public Int32? TaskId { get; internal set; }
	}
	

	/// <summary>
	/// DTO for the input of the "usp_TaskGet" stored procedure.
	/// </summary>
	public partial class TaskGetInputDto
	{
		/// <summary>
		/// Property that fills the TaskId input parameter.
		/// </summary>
		public Int32? TaskId { get; set; }
	}
	
	/// <summary>
	/// DTO for the output of the "usp_TaskGet" stored procedure.
	/// </summary>
	public partial class TaskGetOutputDto	
	{
		public String Name { get; set; }
		public String Description { get; set; }
		public String Status { get; set; }
		public DateTime Created { get; set; }
		public String CreatedBy { get; set; }
		public DateTime Updated { get; set; }
		public String UpdatedBy { get; set; }
	}
	

	/// <summary>
	/// DTO for the input of the "usp_TaskUpdate" stored procedure.
	/// </summary>
	public partial class TaskUpdateInputDto
	{
		/// <summary>
		/// Property that fills the TaskId input parameter.
		/// </summary>
		public Int32? TaskId { get; set; }
		/// <summary>
		/// Property that fills the Name input parameter.
		/// </summary>
		public String Name { get; set; }
		/// <summary>
		/// Property that fills the Description input parameter.
		/// </summary>
		public String Description { get; set; }
		/// <summary>
		/// Property that fills the TaskStatusId input parameter.
		/// </summary>
		public Int32? TaskStatusId { get; set; }
		/// <summary>
		/// Property that fills the Updated input parameter.
		/// </summary>
		public DateTime? Updated { get; set; }
		/// <summary>
		/// Property that fills the UpdatedBy input parameter.
		/// </summary>
		public String UpdatedBy { get; set; }
	}
	

}
